version: '3.4'

services:
  sqlserver-users-news:
      container_name: sqlserver-users-news
      image: "mcr.microsoft.com/mssql/server:2022-latest"
      environment:
        - SA_PASSWORD=YourStrongPassword123
        - ACCEPT_EULA=Y
      ports:
        - "1433:1433"
      networks:
        - appnetwork
      healthcheck:
        test: ["CMD-SHELL", "grep -q 'SQL Server is now ready for client connections' /var/opt/mssql/log/errorlog || exit 1"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 5s

  userservice-api:
    container_name: userservice-api
    image: userservice-api:dev
    build:
      context: .
      dockerfile: UserService.Api/Dockerfile
    ports:
      - "7003:7003"
      - "7004:7004"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      sqlserver-users-news:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      kibana:
        condition: service_healthy
    networks:
      - appnetwork
      - observability
      - mq

  rabbitmq:
    container_name: rabbitmq
    image: "rabbitmq:management"
    ports:
      - "15672:15672"  # Management UI
      - "5672:5672"    # RabbitMQ port
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - mq
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics ping | grep -q 'Ping succeeded'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false   # Disable security features
      - xpack.security.transport.ssl.enabled=false
      - xpack.security.http.ssl.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - observability
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s        
      retries: 5          
      start_period: 10s 
  
  kibana:
    image: docker.elastic.co/kibana/kibana:8.6.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - XPACK_SECURITY_ENABLED=false
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - observability
    healthcheck:
      test: ["CMD-SHELL", "[ -d /usr/share/kibana ] || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

volumes:
  esdata:
    driver: local
  sqlvolume:

networks:
  appnetwork:
    driver: bridge
  observability:
    driver: bridge
  mq:
    driver: bridge